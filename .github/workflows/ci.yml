name: Continuous Integration

on:
  push:
    branches: [ main, development, desktop, feature/p2p ]
  pull_request:
    branches: [ main, development, desktop, feature/p2p ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- Linux Dependencies for Rust Build/Clippy ---
      - name: Install Linux dependencies (Rust)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libgtk-3-dev libayatana-appindicator3-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Set up pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install pnpm dependencies
        run: pnpm install

      # --- Rust Linting ---
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run cargo clippy (Rust Linter)
        run: cargo clippy --workspace --all-targets -- -D warnings

      # --- Frontend Linting ---
      - name: Run pnpm lint (JS/TS Linter)
        run: pnpm lint

  test_rust:
    name: Rust Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- Linux Dependencies for Rust Build/Test ---
      - name: Install Linux dependencies (Rust)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libgtk-3-dev libayatana-appindicator3-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run cargo test
        run: cargo test --workspace

  test_build_web:
    name: Web App Test & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your Node.js version

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8 # Specify your pnpm version
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Set up pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install pnpm dependencies
        run: pnpm install

      - name: Run Web App Tests (Vitest)
        # Provide dummy env vars required by MSW handlers during test setup
        env:
          VITE_SUPABASE_URL: http://localhost:54321
          VITE_SUPABASE_ANON_KEY: dummy_anon_key
        run: pnpm --filter @paynless/web test

      - name: Build Web App (Vite)
        run: pnpm --filter @paynless/web build

  build_tauri_linux:
    name: Tauri App Build (Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Set up pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install pnpm dependencies
        run: pnpm install # Install root and workspace deps

      - name: Install Linux dependencies for Tauri build
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl wget file libssl-dev pkg-config libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libwebkit2gtk-4.1-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install tauri-cli
        run: cargo install tauri-cli

      - name: Build Tauri App (Linux)
        env:
          VITE_APP_TITLE: Paynless CI Build
          VITE_SUPABASE_URL: http://localhost:54321 # Dummy URL for build
          VITE_SUPABASE_ANON_KEY: dummy_anon_key # Dummy key for build
        run: cd apps/windows && cargo tauri build

  build_tauri_windows:
    name: Tauri App Build (Windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: pwsh
        run: echo "STORE_PATH=$(pnpm store path --silent)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set up pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install pnpm dependencies
        run: pnpm install # Install root and workspace deps

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install tauri-cli
        run: cargo install tauri-cli

      - name: Build Tauri App (Windows)
        env:
          VITE_APP_TITLE: Paynless CI Build
          VITE_SUPABASE_URL: http://localhost:54321 # Dummy URL for build
          VITE_SUPABASE_ANON_KEY: dummy_anon_key # Dummy key for build
        run: cd apps/windows && cargo tauri build 